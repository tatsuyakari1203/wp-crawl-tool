#!/usr/bin/env node

import { Command } from 'commander';
import chalk from 'chalk';
import ora from 'ora';
import { mkdirSync, existsSync } from 'fs';
import { join } from 'path';

import { WordPressCrawler } from './src/wordpress-crawler.js';
import { ContentProcessor } from './src/content-processor.js';
import { DocxExporter } from './src/docx-exporter.js';
import { MarkdownExporter } from './src/markdown-exporter.js';

const program = new Command();

program
  .name('wp-crawl-tool')
  .description('Tool ƒë·ªÉ crawl n·ªôi dung WordPress v√† xu·∫•t th√†nh file DOCX')
  .version('1.0.0');

program
  .command('export')
  .description('Crawl v√† xu·∫•t t·∫•t c·∫£ posts t·ª´ WordPress site')
  .requiredOption('-u, --url <url>', 'URL c·ªßa WordPress site (v√≠ d·ª•: https://example.com)')
  .option('-o, --output <filename>', 'T√™n file output', 'wordpress-export')
  .option('-d, --dir <directory>', 'Th∆∞ m·ª•c output', './output')
  .option('-f, --format <format>', 'ƒê·ªãnh d·∫°ng xu·∫•t (docx|markdown)', 'docx')
  .option('--no-toc', 'Kh√¥ng t·∫°o m·ª•c l·ª•c')
  .option('--no-summary', 'Kh√¥ng t·∫°o trang t√≥m t·∫Øt')
  .option('--group-by-category', 'Nh√≥m posts theo category')
  .option('--sort-by-title', 'S·∫Øp x·∫øp theo ti√™u ƒë·ªÅ thay v√¨ ng√†y')
  .action(async (options) => {
    try {
      console.log(chalk.blue.bold('üöÄ WordPress Crawl Tool'));
      console.log(chalk.gray('‚îÄ'.repeat(50)));

      // Validate URL
      let siteUrl = options.url;
      if (!siteUrl.startsWith('http://') && !siteUrl.startsWith('https://')) {
        siteUrl = 'https://' + siteUrl;
      }

      // Validate format
      if (!['docx', 'markdown'].includes(options.format.toLowerCase())) {
        console.error(chalk.red('‚ùå Format kh√¥ng h·ª£p l·ªá. Ch·ªâ h·ªó tr·ª£: docx, markdown'));
        process.exit(1);
      }

      const fileExtension = options.format.toLowerCase() === 'markdown' ? '.md' : '.docx';
      
      console.log(chalk.cyan(`üìç Site: ${siteUrl}`));
      console.log(chalk.cyan(`üìÅ Output: ${join(options.dir, options.output + fileExtension)}`));
      console.log(chalk.cyan(`üìã Format: ${options.format.toUpperCase()}`));
      console.log('');

      // T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
      if (!existsSync(options.dir)) {
        mkdirSync(options.dir, { recursive: true });
        console.log(chalk.green(`‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c: ${options.dir}`));
      }

      // Kh·ªüi t·∫°o crawler
      const crawler = new WordPressCrawler(siteUrl);
      
      // Ki·ªÉm tra API availability
      const apiAvailable = await crawler.checkApiAvailability();
      if (!apiAvailable) {
        console.error(chalk.red('‚ùå WordPress REST API kh√¥ng kh·∫£ d·ª•ng ho·∫∑c site kh√¥ng t·ªìn t·∫°i'));
        process.exit(1);
      }

      // L·∫•y th√¥ng tin site
      const siteInfo = await crawler.getSiteInfo();
      if (siteInfo) {
        console.log(chalk.green(`‚úÖ K·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn: ${siteInfo.name || 'WordPress Site'}`));
        console.log('');
      }

      // Crawl posts
      const posts = await crawler.getAllPosts();
      
      if (posts.length === 0) {
        console.log(chalk.yellow('‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y posts n√†o'));
        process.exit(0);
      }

      console.log(chalk.green(`‚úÖ ƒê√£ crawl ${posts.length} posts`));

      // X·ª≠ l√Ω content
      const processor = new ContentProcessor(options.dir);
      console.log(chalk.blue('üîÑ ƒêang x·ª≠ l√Ω n·ªôi dung...'));

      const exportOptions = {
        includeTableOfContents: options.toc,
        includeSummary: options.summary,
        sortByDate: !options.sortByTitle,
        groupByCategory: options.groupByCategory,
        downloadImages: true,
        baseUrl: siteUrl
      };

      let outputPath;
      
      if (options.format.toLowerCase() === 'markdown') {
        // T·∫°o Markdown
        const exporter = new MarkdownExporter();
        await exporter.createMarkdown(posts, processor, exportOptions);
        outputPath = await exporter.saveToFile(options.output, options.dir);
      } else {
        // T·∫°o DOCX
        const exporter = new DocxExporter();
        await exporter.createDocument(posts, processor, exportOptions);
        outputPath = await exporter.saveToFile(options.output, options.dir);
      }
      
      console.log('');
      console.log(chalk.green.bold('üéâ Ho√†n th√†nh!'));
      console.log(chalk.cyan(`üìÑ File ƒë√£ ƒë∆∞·ª£c l∆∞u: ${outputPath}`));
      
      // Th·ªëng k√™
      const summary = processor.createContentSummary(posts);
      console.log('');
      console.log(chalk.blue.bold('üìä Th·ªëng k√™:'));
      console.log(chalk.gray(`   ‚Ä¢ T·ªïng posts: ${summary.totalPosts}`));
      console.log(chalk.gray(`   ‚Ä¢ T·ªïng t·ª´: ${summary.totalWords.toLocaleString('vi-VN')}`));
      console.log(chalk.gray(`   ‚Ä¢ Categories: ${summary.categories.length}`));
      console.log(chalk.gray(`   ‚Ä¢ Tags: ${summary.tags.length}`));
      console.log(chalk.gray(`   ‚Ä¢ T√°c gi·∫£: ${summary.authors.length}`));

    } catch (error) {
      console.error(chalk.red.bold('‚ùå L·ªói:'), error.message);
      process.exit(1);
    }
  });

program
  .command('check')
  .description('Ki·ªÉm tra WordPress site v√† API availability')
  .requiredOption('-u, --url <url>', 'URL c·ªßa WordPress site')
  .action(async (options) => {
    try {
      console.log(chalk.blue.bold('üîç Ki·ªÉm tra WordPress Site'));
      console.log(chalk.gray('‚îÄ'.repeat(50)));

      let siteUrl = options.url;
      if (!siteUrl.startsWith('http://') && !siteUrl.startsWith('https://')) {
        siteUrl = 'https://' + siteUrl;
      }

      const crawler = new WordPressCrawler(siteUrl);
      
      // Ki·ªÉm tra API
      const apiAvailable = await crawler.checkApiAvailability();
      
      if (apiAvailable) {
        // L·∫•y th√¥ng tin site
        const siteInfo = await crawler.getSiteInfo();
        
        // L·∫•y sample posts
        const spinner = ora('ƒêang l·∫•y th√¥ng tin posts...').start();
        const sampleResponse = await fetch(`${siteUrl}/wp-json/wp/v2/posts?per_page=1`);
        const totalPosts = sampleResponse.headers.get('X-WP-Total') || 'Kh√¥ng x√°c ƒë·ªãnh';
        spinner.succeed(`T·ªïng s·ªë posts: ${totalPosts}`);

        // L·∫•y categories v√† tags
        const categories = await crawler.getCategories();
        const tags = await crawler.getTags();

        console.log('');
        console.log(chalk.green.bold('‚úÖ Th√¥ng tin site:'));
        if (siteInfo) {
          console.log(chalk.cyan(`   ‚Ä¢ T√™n: ${siteInfo.name || 'Kh√¥ng x√°c ƒë·ªãnh'}`));
          console.log(chalk.cyan(`   ‚Ä¢ M√¥ t·∫£: ${siteInfo.description || 'Kh√¥ng c√≥'}`));
          console.log(chalk.cyan(`   ‚Ä¢ URL: ${siteInfo.url || siteUrl}`));
        }
        console.log(chalk.cyan(`   ‚Ä¢ T·ªïng posts: ${totalPosts}`));
        console.log(chalk.cyan(`   ‚Ä¢ Categories: ${categories.length}`));
        console.log(chalk.cyan(`   ‚Ä¢ Tags: ${tags.length}`));
        
        console.log('');
        console.log(chalk.green('üéâ Site s·∫µn s√†ng ƒë·ªÉ crawl!'));
        console.log(chalk.gray(`Ch·∫°y: bun run index.js export -u ${siteUrl}`));
        
      } else {
        console.log(chalk.red('‚ùå Site kh√¥ng h·ªó tr·ª£ WordPress REST API ho·∫∑c kh√¥ng t·ªìn t·∫°i'));
      }

    } catch (error) {
      console.error(chalk.red.bold('‚ùå L·ªói:'), error.message);
      process.exit(1);
    }
  });

// X·ª≠ l√Ω khi kh√¥ng c√≥ command
program.on('command:*', () => {
  console.error(chalk.red('‚ùå Command kh√¥ng h·ª£p l·ªá: %s'), program.args.join(' '));
  console.log(chalk.yellow('S·ª≠ d·ª•ng --help ƒë·ªÉ xem danh s√°ch commands'));
  process.exit(1);
});

// Parse arguments
program.parse();

// Hi·ªÉn th·ªã help n·∫øu kh√¥ng c√≥ arguments
if (!process.argv.slice(2).length) {
  program.outputHelp();
}