import { writeFileSync, mkdirSync, existsSync } from 'fs';
import { join, extname, basename } from 'path';
import chalk from 'chalk';
import { UIHelper } from './utils/ui.js';

export class MarkdownExporter {
  constructor() {
    this.content = '';
    this.imagesDir = '';
  }

  /**
   * T·∫°o file markdown t·ª´ danh s√°ch posts
   */
  async createMarkdown(posts, contentProcessor, options = {}) {
    console.log(UIHelper.createProgressBox('üìù T·∫°o Markdown Document', [
      `Chu·∫©n b·ªã x·ª≠ l√Ω ${posts.length} b√†i vi·∫øt`,
      'ƒêang kh·ªüi t·∫°o markdown structure...'
    ]));

    try {
      const {
        includeTableOfContents = true,
        includeSummary = true,
        sortByDate = true,
        groupByCategory = false,
        downloadImages = true
      } = options;

      // S·∫Øp x·∫øp posts
      UIHelper.updateProgress(
        UIHelper.createProcessStatus('üîÑ', 'S·∫Øp x·∫øp posts', 'Theo th·ªùi gian...', '')
      );
      
      let sortedPosts = [...posts];
      if (sortByDate) {
        sortedPosts.sort((a, b) => new Date(b.date) - new Date(a.date));
      }

      // T·∫°o summary
      UIHelper.updateProgress(
        UIHelper.createProcessStatus('üìä', 'T·∫°o summary', 'Ph√¢n t√≠ch n·ªôi dung...', '')
      );
      const summary = contentProcessor.createContentSummary(posts);
      
      // Kh·ªüi t·∫°o markdown content
      this.content = '';

      // Title page
      UIHelper.updateProgress(
        UIHelper.createProcessStatus('üìù', 'T·∫°o trang ti√™u ƒë·ªÅ', 'Thi·∫øt k·∫ø layout...', '')
      );
      this.addTitlePage(summary);

      // Summary page
      if (includeSummary) {
        UIHelper.updateProgress(
          UIHelper.createProcessStatus('üìã', 'T·∫°o trang t√≥m t·∫Øt', 'Th·ªëng k√™ d·ªØ li·ªáu...', '')
        );
        this.addSummaryPage(summary);
      }

      // Table of contents
      if (includeTableOfContents) {
        UIHelper.updateProgress(
          UIHelper.createProcessStatus('üìë', 'T·∫°o m·ª•c l·ª•c', 'Li·ªát k√™ b√†i vi·∫øt...', '')
        );
        this.addTableOfContents(sortedPosts);
      }

      // Posts content
      if (groupByCategory) {
        await this.addPostsByCategory(sortedPosts, contentProcessor, downloadImages, options.baseUrl);
      } else {
        await this.addPostsSequentially(sortedPosts, contentProcessor, downloadImages, options.baseUrl);
      }

      UIHelper.updateProgress(
        UIHelper.createProcessStatus('‚úÖ', 'Ho√†n th√†nh', 'Markdown ƒë√£ ƒë∆∞·ª£c t·∫°o', '')
      );

      console.log('');
      console.log(chalk.green('‚úÖ Markdown content ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!'));

    } catch (error) {
      console.log('');
      console.log(UIHelper.createErrorBox('L·ªói t·∫°o markdown', [
        error.message,
        'Vui l√≤ng ki·ªÉm tra l·∫°i d·ªØ li·ªáu ƒë·∫ßu v√†o'
      ]));
      throw error;
    }
  }

  /**
   * Th√™m trang ti√™u ƒë·ªÅ
   */
  addTitlePage(summary) {
    this.content += `# WordPress Export\n\n`;
    this.content += `**Site:** ${summary.siteName || 'WordPress Site'}\n\n`;
    this.content += `**Ng√†y xu·∫•t:** ${new Date().toLocaleDateString('vi-VN')}\n\n`;
    this.content += `**T·ªïng s·ªë b√†i vi·∫øt:** ${summary.totalPosts}\n\n`;
    this.content += `---\n\n`;
  }

  /**
   * Th√™m trang t√≥m t·∫Øt
   */
  addSummaryPage(summary) {
    this.content += `## üìä T√≥m t·∫Øt n·ªôi dung\n\n`;
    
    // Th·ªëng k√™ c∆° b·∫£n
    this.content += `### Th·ªëng k√™ t·ªïng quan\n\n`;
    this.content += `- **T·ªïng s·ªë b√†i vi·∫øt:** ${summary.totalPosts}\n`;
    this.content += `- **T·ªïng s·ªë t·ª´:** ${summary.totalWords.toLocaleString()}\n`;
    this.content += `- **Trung b√¨nh t·ª´/b√†i:** ${Math.round(summary.averageWords)}\n`;
    this.content += `- **Ng√†y ƒë·∫ßu ti√™n:** ${summary.dateRange.earliest}\n`;
    this.content += `- **Ng√†y g·∫ßn nh·∫•t:** ${summary.dateRange.latest}\n\n`;

    // Categories
    if (summary.categories.length > 0) {
      this.content += `### üìÇ Categories (${summary.categories.length})\n\n`;
      summary.categories.forEach(cat => {
        this.content += `- **${cat.name}** (${cat.count} b√†i)\n`;
      });
      this.content += `\n`;
    }

    // Tags
    if (summary.tags.length > 0) {
      this.content += `### üè∑Ô∏è Tags ph·ªï bi·∫øn\n\n`;
      summary.tags.slice(0, 20).forEach(tag => {
        this.content += `- ${tag.name} (${tag.count})\n`;
      });
      this.content += `\n`;
    }

    // Authors
    if (summary.authors.length > 0) {
      this.content += `### ‚úçÔ∏è T√°c gi·∫£\n\n`;
      summary.authors.forEach(author => {
        this.content += `- **${author.name}** (${author.count} b√†i)\n`;
      });
      this.content += `\n`;
    }

    this.content += `---\n\n`;
  }

  /**
   * Th√™m m·ª•c l·ª•c
   */
  addTableOfContents(posts) {
    this.content += `## üìë M·ª•c l·ª•c\n\n`;
    
    posts.forEach((post, index) => {
      const title = this.cleanText(post.title.rendered);
      const date = new Date(post.date).toLocaleDateString('vi-VN');
      this.content += `${index + 1}. [${title}](#post-${post.id}) - *${date}*\n`;
    });
    
    this.content += `\n---\n\n`;
  }

  /**
   * Th√™m posts theo th·ª© t·ª±
   */
  async addPostsSequentially(posts, contentProcessor, downloadImages, baseUrl) {
    this.content += `## üìù N·ªôi dung b√†i vi·∫øt\n\n`;
    
    for (let i = 0; i < posts.length; i++) {
      const post = posts[i];
      
      UIHelper.updateProgress(
        UIHelper.createProcessStatus(
          'üìÑ', 
          `X·ª≠ l√Ω b√†i vi·∫øt ${i + 1}/${posts.length}`, 
          this.cleanText(post.title.rendered).substring(0, 50) + '...',
          UIHelper.createProgressBar(i + 1, posts.length, 25)
        )
      );

      await this.addPostContent(post, contentProcessor, i + 1, downloadImages, baseUrl);
    }
  }

  /**
   * Th√™m posts theo category
   */
  async addPostsByCategory(posts, contentProcessor, downloadImages, baseUrl) {
    // Nh√≥m posts theo category
    const postsByCategory = {};
    
    for (const post of posts) {
      const categories = post._embedded?.['wp:term']?.[0] || [];
      const categoryName = categories.length > 0 ? categories[0].name : 'Uncategorized';
      
      if (!postsByCategory[categoryName]) {
        postsByCategory[categoryName] = [];
      }
      postsByCategory[categoryName].push(post);
    }

    this.content += `## üìù N·ªôi dung b√†i vi·∫øt\n\n`;

    let postIndex = 1;
    for (const [categoryName, categoryPosts] of Object.entries(postsByCategory)) {
      this.content += `### üìÇ ${categoryName}\n\n`;
      
      for (const post of categoryPosts) {
        UIHelper.updateProgress(
          UIHelper.createProcessStatus(
            'üìÑ', 
            `X·ª≠ l√Ω b√†i vi·∫øt ${postIndex}/${posts.length}`, 
            this.cleanText(post.title.rendered).substring(0, 50) + '...',
            UIHelper.createProgressBar(postIndex, posts.length, 25)
          )
        );

        await this.addPostContent(post, contentProcessor, postIndex, downloadImages, baseUrl);
        postIndex++;
      }
    }
  }

  /**
   * Th√™m n·ªôi dung m·ªôt post
   */
  async addPostContent(post, contentProcessor, index, downloadImages, baseUrl) {
    const meta = contentProcessor.extractPostMeta(post);
    
    // Anchor cho m·ª•c l·ª•c
    this.content += `<a id="post-${post.id}"></a>\n\n`;
    
    // Ti√™u ƒë·ªÅ
    this.content += `### ${index}. ${this.cleanText(meta.title)}\n\n`;
    
    // Meta info
    this.content += `**Ng√†y:** ${meta.date} | **T√°c gi·∫£:** ${meta.author}\n\n`;
    
    if (meta.categories.length > 0) {
      this.content += `**Categories:** ${meta.categories.join(', ')}\n\n`;
    }
    
    if (meta.tags.length > 0) {
      this.content += `**Tags:** ${meta.tags.join(', ')}\n\n`;
    }

    // N·ªôi dung
    const processedContent = await this.processContentForMarkdown(
      post.content.rendered, 
      contentProcessor, 
      downloadImages,
      post.id,
      baseUrl
    );
    
    this.content += processedContent;
    this.content += `\n\n---\n\n`;
  }

  /**
   * X·ª≠ l√Ω n·ªôi dung HTML th√†nh markdown
   */
  async processContentForMarkdown(htmlContent, contentProcessor, downloadImages, postId, baseUrl) {
    // Ki·ªÉm tra input
    if (!htmlContent) {
      return '';
    }

    // S·ª≠ d·ª•ng ContentProcessor ƒë·ªÉ x·ª≠ l√Ω HTML
    const processed = contentProcessor.processPostContent({
      content: { rendered: htmlContent }
    });

    let markdownContent = processed.content || htmlContent;

    // Download images n·∫øu c·∫ßn
    if (downloadImages && processed.images.length > 0) {
      const downloadedImages = await contentProcessor.downloadPostImages(
          processed.images, 
          baseUrl,
          false // Kh√¥ng n√©n ·∫£nh cho markdown
        );

      // Thay th·∫ø image references
      downloadedImages.forEach((img, index) => {
        if (img.localPath) {
          const relativePath = img.localPath.replace(contentProcessor.outputDir + '/', '');
          const altText = img.alt || `Image ${index + 1}`;
          const imageMarkdown = `![${altText}](${relativePath})`;
          
          // Thay th·∫ø img tag b·∫±ng markdown
          markdownContent = markdownContent.replace(
            new RegExp(`<img[^>]*data-image-index="${index}"[^>]*>`, 'g'),
            imageMarkdown
          );
        }
      });
    }

    // Chuy·ªÉn ƒë·ªïi HTML c√≤n l·∫°i th√†nh markdown
    markdownContent = this.convertHtmlToMarkdown(markdownContent);
    
    return markdownContent;
  }

  /**
   * Chuy·ªÉn ƒë·ªïi HTML th√†nh markdown
   */
  convertHtmlToMarkdown(html) {
    if (!html || typeof html !== 'string') {
      return '';
    }
    
    let markdown = html;

    // Headers
    markdown = markdown.replace(/<h1[^>]*>(.*?)<\/h1>/gi, '# $1\n\n');
    markdown = markdown.replace(/<h2[^>]*>(.*?)<\/h2>/gi, '## $1\n\n');
    markdown = markdown.replace(/<h3[^>]*>(.*?)<\/h3>/gi, '### $1\n\n');
    markdown = markdown.replace(/<h4[^>]*>(.*?)<\/h4>/gi, '#### $1\n\n');
    markdown = markdown.replace(/<h5[^>]*>(.*?)<\/h5>/gi, '##### $1\n\n');
    markdown = markdown.replace(/<h6[^>]*>(.*?)<\/h6>/gi, '###### $1\n\n');

    // Bold and italic
    markdown = markdown.replace(/<strong[^>]*>(.*?)<\/strong>/gi, '**$1**');
    markdown = markdown.replace(/<b[^>]*>(.*?)<\/b>/gi, '**$1**');
    markdown = markdown.replace(/<em[^>]*>(.*?)<\/em>/gi, '*$1*');
    markdown = markdown.replace(/<i[^>]*>(.*?)<\/i>/gi, '*$1*');

    // Links
    markdown = markdown.replace(/<a[^>]*href="([^"]*)"[^>]*>(.*?)<\/a>/gi, '[$2]($1)');

    // Code
    markdown = markdown.replace(/<code[^>]*>(.*?)<\/code>/gi, '`$1`');
    markdown = markdown.replace(/<pre[^>]*>(.*?)<\/pre>/gis, '```\n$1\n```\n\n');

    // Blockquotes
    markdown = markdown.replace(/<blockquote[^>]*>(.*?)<\/blockquote>/gis, (match, content) => {
      return content.split('\n').map(line => '> ' + line.trim()).join('\n') + '\n\n';
    });

    // Lists
    markdown = markdown.replace(/<ul[^>]*>(.*?)<\/ul>/gis, '$1\n');
    markdown = markdown.replace(/<ol[^>]*>(.*?)<\/ol>/gis, '$1\n');
    markdown = markdown.replace(/<li[^>]*>(.*?)<\/li>/gi, '- $1\n');

    // Paragraphs
    markdown = markdown.replace(/<p[^>]*>(.*?)<\/p>/gi, '$1\n\n');

    // Line breaks
    markdown = markdown.replace(/<br[^>]*>/gi, '\n');

    // Remove remaining HTML tags
    markdown = markdown.replace(/<[^>]*>/g, '');

    // Clean up extra whitespace
    markdown = markdown.replace(/\n{3,}/g, '\n\n');
    markdown = markdown.trim();

    return markdown;
  }

  /**
   * L√†m s·∫°ch text
   */
  cleanText(text) {
    return text.replace(/<[^>]*>/g, '').trim();
  }

  /**
   * L∆∞u file markdown
   */
  async saveToFile(filename, outputDir = './output') {
    try {
      // T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
      if (!existsSync(outputDir)) {
        mkdirSync(outputDir, { recursive: true });
      }

      // ƒê·∫£m b·∫£o filename c√≥ extension .md
      const finalFilename = filename.endsWith('.md') ? filename : filename + '.md';
      const outputPath = join(outputDir, finalFilename);

      // L∆∞u file
      writeFileSync(outputPath, this.content, 'utf8');

      console.log('');
      console.log(UIHelper.createSuccessBox('File ƒë√£ ƒë∆∞·ª£c l∆∞u', [
        `üìÑ ${outputPath}`,
        `üìä ${this.content.length.toLocaleString()} k√Ω t·ª±`,
        `üìù ${this.content.split('\n').length.toLocaleString()} d√≤ng`
      ]));

      return outputPath;

    } catch (error) {
      console.log('');
      console.log(UIHelper.createErrorBox('L·ªói l∆∞u file', [
        error.message,
        'Vui l√≤ng ki·ªÉm tra quy·ªÅn ghi file'
      ]));
      throw error;
    }
  }
}